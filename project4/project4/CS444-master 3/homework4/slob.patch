From eb533f6faef9f1ac19e7b2d6d39adc21d5f985d0 Mon Sep 17 00:00:00 2001
From: Dylan Camus <camusd@os-class.engr.oregonstate.edu>
Date: Mon, 16 May 2016 23:02:46 -0700
Subject: [PATCH 01/10] ready to create patch

---
 drivers/block/Kconfig    |   6 ++
 drivers/block/Makefile   |   2 +
 drivers/block/rdcrypto.c | 229 +++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 237 insertions(+)
 create mode 100644 drivers/block/rdcrypto.c

diff --git a/drivers/block/Kconfig b/drivers/block/Kconfig
index 014a1cf..5eba25f 100644
--- a/drivers/block/Kconfig
+++ b/drivers/block/Kconfig
@@ -15,6 +15,12 @@ menuconfig BLK_DEV
 
 if BLK_DEV
 
+config RDCRYPTO
+	tristate "RAMdisk with encryption"
+	---help---
+		This is a driver written by Dylan Camus. It is a RAMdisk.
+		It encrypts data when written to and decrypts data when read.
+ 
 config BLK_DEV_NULL_BLK
 	tristate "Null test block driver"
 
diff --git a/drivers/block/Makefile b/drivers/block/Makefile
index 02b688d..58d6922 100644
--- a/drivers/block/Makefile
+++ b/drivers/block/Makefile
@@ -5,6 +5,8 @@
 # Rewritten to use lists instead of if-statements.
 # 
 
+obj-$(CONFIG_RDCRYPTO)		+= rdcrypto.ko
+
 obj-$(CONFIG_MAC_FLOPPY)	+= swim3.o
 obj-$(CONFIG_BLK_DEV_SWIM)	+= swim_mod.o
 obj-$(CONFIG_BLK_DEV_FD)	+= floppy.o
diff --git a/drivers/block/rdcrypto.c b/drivers/block/rdcrypto.c
new file mode 100644
index 0000000..5b7df51
--- /dev/null
+++ b/drivers/block/rdcrypto.c
@@ -0,0 +1,229 @@
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/init.h>
+
+#include <linux/sched.h>
+#include <linux/kernel.h>	/* printk() */
+#include <linux/slab.h>		/* kmalloc() */
+#include <linux/fs.h>		/* everything... */
+#include <linux/errno.h>	/* error codes */
+#include <linux/timer.h>
+#include <linux/types.h>	/* size_t */
+#include <linux/fcntl.h>	/* O_ACCMODE */
+#include <linux/hdreg.h>	/* HDIO_GETGEO */
+#include <linux/kdev_t.h>
+#include <linux/vmalloc.h>
+#include <linux/genhd.h>
+#include <linux/blkdev.h>
+#include <linux/buffer_head.h>	/* invalidate_bdev */
+#include <linux/bio.h>
+#include <linux/crypto.h>
+
+MODULE_LICENSE("Dual BSD/GPL");
+
+
+static char *key = "placeholderkey";
+struct crypto_cipher *my_cipher; 
+static int rdcrypto_major = 0;
+module_param(rdcrypto_major, int, 0);
+static int logical_block_size = 512;
+module_param(logical_block_size, int, 0);
+static int nsectors = 1024;	/* How big the drive is */
+module_param(nsectors, int, 0);
+
+#define RDCRYPTO_CIPHER 	"aes"
+
+#define KERNEL_SECTOR_SIZE	512
+
+/*
+ * Our request queue.
+ */
+static struct request_queue *Queue;
+
+/*
+ * The internal representation of our device.
+ */
+struct rdcrypto_dev {
+        unsigned long size;             /* Device size in sectors */
+        u8 *data;                       /* The data array */
+        spinlock_t lock;                /* For mutual exclusion */
+        struct gendisk *gd;             /* The gendisk structure */
+} Device;
+
+static void hexdump(unsigned char *buf, unsigned int len)
+{
+	while(len--)
+		printk("%02x", *buf++);
+
+	printk("\n");
+}
+
+/*
+ * Handle an I/O request.
+ */
+static void
+rdcrypto_transfer(struct rdcrypto_dev *dev, unsigned long sector,
+		unsigned long nsect, char *buffer, int write)
+{
+	unsigned long offset = sector * KERNEL_SECTOR_SIZE;
+	unsigned long nbytes = nsect * KERNEL_SECTOR_SIZE;
+	int i;
+
+	if ((offset + nbytes) > dev->size) {
+		printk (KERN_NOTICE "Beyond-end write (%ld %ld)\n",
+		      offset, nbytes);
+		return;
+	}
+
+	/* initialize crypto */
+	crypto_cipher_clear_flags(my_cipher, ~0);
+	crypto_cipher_setkey(my_cipher, key, strlen(key));
+
+	if (write)
+	{
+		printk("RAM Disk is being written to\n");
+		printk("Data before encryption: ");
+		hexdump(buffer, nbytes);
+		for(i = 0; i < nbytes; i += 
+		      crypto_cipher_blocksize(my_cipher))
+		{
+			memset(dev->data + offset + i, 0,
+			      crypto_cipher_blocksize(my_cipher));
+			crypto_cipher_encrypt_one(my_cipher,
+			      dev->data + offset + i, buffer + i);
+		}
+		printk("Data after encryption: ");
+		hexdump(dev->data + offset, nbytes);
+	}
+	else
+	{
+		printk("RAM Disk is being read\n");
+		printk("Data before decryption: ");
+		hexdump(dev->data + offset, nbytes);
+		for(i = 0; i < nbytes; i +=
+		      crypto_cipher_blocksize(my_cipher))
+		{
+			crypto_cipher_decrypt_one(my_cipher,
+			      buffer + i, dev->data + offset + i);
+		}
+		printk("Data after decryption: ");
+		hexdump(buffer, nbytes);
+	}
+}
+
+/*
+ * The simple form of the request function.
+ */
+static void rdcrypto_request(struct request_queue *q)
+{
+	struct request *req;
+	req = blk_fetch_request(q);
+	while (req != NULL) {
+		//struct rdcrypto_dev *dev = req->rq_disk->private_data;
+		if (req == NULL || req->cmd_type != REQ_TYPE_FS) {
+			printk (KERN_NOTICE "Skip non-fs request\n");
+			__blk_end_request_cur(req, -EIO);
+			continue;
+		}
+		rdcrypto_transfer(&Device, blk_rq_pos(req),
+		      blk_rq_cur_sectors(req),
+				req->buffer, rq_data_dir(req));
+		if(! __blk_end_request_cur(req, 0))
+		{
+			req = blk_fetch_request(q);
+		}		
+	}
+}
+
+
+int
+rdcrypto_getgeo(struct block_device *block_device, struct hd_geometry *geo)
+{
+	long size;
+
+	size = Device.size * (logical_block_size / KERNEL_SECTOR_SIZE);
+	geo->cylinders = (size & ~0x3f) >> 6;
+	geo->heads = 4;
+	geo->sectors = 16;
+	geo->start = 0;
+	return 0;
+}
+
+/*
+ * The device operations structure.
+ */
+static struct block_device_operations rdcrypto_ops = {
+	.owner          = THIS_MODULE,
+	.getgeo		= rdcrypto_getgeo
+};
+
+static int __init rdcrypto_init(void)
+{
+   	/*
+	 * Set up our internal device.
+	 */ 
+   	Device.size = nsectors * logical_block_size;
+	spin_lock_init(&Device.lock);
+	Device.data = vmalloc(Device.size);
+	if(Device.data == NULL)
+	   	return -ENOMEN;
+	/*
+	 * Get a request queue.
+	 */ 
+	Queue = blk_init_queue(rdcrypto_request, &Device.lock);
+	if(Queue == NULL)
+	   	goto out;
+	blk_queue_logical_block_size(Queue, logical_block_size);
+	/*
+	 * Initialize crypto.
+	 */ 
+	tfm = crypto_alloc_ciphter(RDCRYPTO_CIPHER, 0, 0);
+	if(IS_ERR(tfm))
+	{
+		printk(KERN_ERR "rdcrypto: cipher allocation failure\n");
+		return PTR_ERR(tfm);
+	}
+	/*
+	 * Get registered.
+	 */
+	rdcypto_major = register_blkdev(rdcrypto_major, "rdcrypto");
+	if (rdcrypto_major <= 0) {
+		printk(KERN_WARNING "rdcrypto: "
+		      "unable to get major number\n");
+		goto out;
+	}
+	/*
+	 * And the gendisk structure.
+	 */
+	Device.gd = alloc_disk(16);
+	if(!Device.gd)
+	   	goto out_unregister;
+	Device.gd->major = rdcrypto_major;
+	Device.gd->first_minor = 0;
+	Device.gd->fops = &rdcrypto_ops;
+	Device.gd->private_data = &Device;
+	strcpy(Device.gd->disk_name, "rdcrypto0");
+	set_capacity(Device.gd, nsectors);
+	Device.gd->queue = Queue;
+	add_disk(Device.gd);
+
+	return 0;
+	       
+out_unregister:
+	unregister_blkdev(rdcrypto_major, "rdcrypto");
+out:
+	vfree(Device.data);
+	return -ENOMEM;
+}
+
+static void __exit rdcrypto_exit(void)
+{
+   	del_gendisk(Device.gd);
+	put_disk(Device.gd);
+	unregister_blkdev(rdcrypto_major, "rdcrypto");
+	blk_cleanup_queue(Queue);
+	vfree(Device.data);
+}
+	
+module_init(rdcrypto_init);
+module_exit(rdcrypto_exit);
-- 
1.7.12.4


From 82194a8adf27b7bbd9e39b6537b05d18ad690610 Mon Sep 17 00:00:00 2001
From: Dylan Camus <camusd@os-class.engr.oregonstate.edu>
Date: Wed, 18 May 2016 18:10:57 -0700
Subject: [PATCH 02/10] fixed some bugs

---
 drivers/block/Makefile   | 2 +-
 drivers/block/rdcrypto.c | 8 ++++----
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/block/Makefile b/drivers/block/Makefile
index 58d6922..2ebc0e3 100644
--- a/drivers/block/Makefile
+++ b/drivers/block/Makefile
@@ -5,7 +5,7 @@
 # Rewritten to use lists instead of if-statements.
 # 
 
-obj-$(CONFIG_RDCRYPTO)		+= rdcrypto.ko
+obj-$(CONFIG_RDCRYPTO)		+= rdcrypto.o
 
 obj-$(CONFIG_MAC_FLOPPY)	+= swim3.o
 obj-$(CONFIG_BLK_DEV_SWIM)	+= swim_mod.o
diff --git a/drivers/block/rdcrypto.c b/drivers/block/rdcrypto.c
index 5b7df51..127e08f 100644
--- a/drivers/block/rdcrypto.c
+++ b/drivers/block/rdcrypto.c
@@ -166,7 +166,7 @@ static int __init rdcrypto_init(void)
 	spin_lock_init(&Device.lock);
 	Device.data = vmalloc(Device.size);
 	if(Device.data == NULL)
-	   	return -ENOMEN;
+	   	return -ENOMEM;
 	/*
 	 * Get a request queue.
 	 */ 
@@ -177,11 +177,11 @@ static int __init rdcrypto_init(void)
 	/*
 	 * Initialize crypto.
 	 */ 
-	tfm = crypto_alloc_ciphter(RDCRYPTO_CIPHER, 0, 0);
-	if(IS_ERR(tfm))
+	mycipher = crypto_alloc_cipher(RDCRYPTO_CIPHER, 0, 0);
+	if(IS_ERR(my_cipher))
 	{
 		printk(KERN_ERR "rdcrypto: cipher allocation failure\n");
-		return PTR_ERR(tfm);
+		return PTR_ERR(my_cipher);
 	}
 	/*
 	 * Get registered.
-- 
1.7.12.4


From 23c34b65da46c1a6f2f0bd2fc906607c492a8a14 Mon Sep 17 00:00:00 2001
From: Dylan Camus <camusd@os-class.engr.oregonstate.edu>
Date: Wed, 18 May 2016 18:16:13 -0700
Subject: [PATCH 03/10] fixed a small bug in rdcrypto

---
 drivers/block/rdcrypto.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/drivers/block/rdcrypto.c b/drivers/block/rdcrypto.c
index 127e08f..3ddb0b62 100644
--- a/drivers/block/rdcrypto.c
+++ b/drivers/block/rdcrypto.c
@@ -177,7 +177,7 @@ static int __init rdcrypto_init(void)
 	/*
 	 * Initialize crypto.
 	 */ 
-	mycipher = crypto_alloc_cipher(RDCRYPTO_CIPHER, 0, 0);
+	my_cipher = crypto_alloc_cipher(RDCRYPTO_CIPHER, 0, 0);
 	if(IS_ERR(my_cipher))
 	{
 		printk(KERN_ERR "rdcrypto: cipher allocation failure\n");
@@ -186,7 +186,7 @@ static int __init rdcrypto_init(void)
 	/*
 	 * Get registered.
 	 */
-	rdcypto_major = register_blkdev(rdcrypto_major, "rdcrypto");
+	rdcrypto_major = register_blkdev(rdcrypto_major, "rdcrypto");
 	if (rdcrypto_major <= 0) {
 		printk(KERN_WARNING "rdcrypto: "
 		      "unable to get major number\n");
-- 
1.7.12.4


From 17c0796c8be46cc46930a56787234600f6968877 Mon Sep 17 00:00:00 2001
From: Dylan Camus <camusd@os-class.engr.oregonstate.edu>
Date: Wed, 18 May 2016 19:26:02 -0700
Subject: [PATCH 04/10] finished debugging

---
 drivers/block/rdcrypto.c | 19 +++++--------------
 1 file changed, 5 insertions(+), 14 deletions(-)

diff --git a/drivers/block/rdcrypto.c b/drivers/block/rdcrypto.c
index 3ddb0b62..6b3a46d 100644
--- a/drivers/block/rdcrypto.c
+++ b/drivers/block/rdcrypto.c
@@ -2,25 +2,17 @@
 #include <linux/moduleparam.h>
 #include <linux/init.h>
 
-#include <linux/sched.h>
 #include <linux/kernel.h>	/* printk() */
-#include <linux/slab.h>		/* kmalloc() */
 #include <linux/fs.h>		/* everything... */
 #include <linux/errno.h>	/* error codes */
-#include <linux/timer.h>
 #include <linux/types.h>	/* size_t */
-#include <linux/fcntl.h>	/* O_ACCMODE */
-#include <linux/hdreg.h>	/* HDIO_GETGEO */
-#include <linux/kdev_t.h>
 #include <linux/vmalloc.h>
 #include <linux/genhd.h>
 #include <linux/blkdev.h>
-#include <linux/buffer_head.h>	/* invalidate_bdev */
-#include <linux/bio.h>
 #include <linux/crypto.h>
 
 MODULE_LICENSE("Dual BSD/GPL");
-
+static char *Version = "1.4";
 
 static char *key = "placeholderkey";
 struct crypto_cipher *my_cipher; 
@@ -43,7 +35,7 @@ static struct request_queue *Queue;
 /*
  * The internal representation of our device.
  */
-struct rdcrypto_dev {
+static struct rdcrypto_dev {
         unsigned long size;             /* Device size in sectors */
         u8 *data;                       /* The data array */
         spinlock_t lock;                /* For mutual exclusion */
@@ -119,7 +111,6 @@ static void rdcrypto_request(struct request_queue *q)
 	struct request *req;
 	req = blk_fetch_request(q);
 	while (req != NULL) {
-		//struct rdcrypto_dev *dev = req->rq_disk->private_data;
 		if (req == NULL || req->cmd_type != REQ_TYPE_FS) {
 			printk (KERN_NOTICE "Skip non-fs request\n");
 			__blk_end_request_cur(req, -EIO);
@@ -127,8 +118,8 @@ static void rdcrypto_request(struct request_queue *q)
 		}
 		rdcrypto_transfer(&Device, blk_rq_pos(req),
 		      blk_rq_cur_sectors(req),
-				req->buffer, rq_data_dir(req));
-		if(! __blk_end_request_cur(req, 0))
+		      req->buffer, rq_data_dir(req));
+		if(!__blk_end_request_cur(req, 0))
 		{
 			req = blk_fetch_request(q);
 		}		
@@ -187,7 +178,7 @@ static int __init rdcrypto_init(void)
 	 * Get registered.
 	 */
 	rdcrypto_major = register_blkdev(rdcrypto_major, "rdcrypto");
-	if (rdcrypto_major <= 0) {
+	if (rdcrypto_major < 0) {
 		printk(KERN_WARNING "rdcrypto: "
 		      "unable to get major number\n");
 		goto out;
-- 
1.7.12.4


From fda3f84e846d340a2ec7c712f2b9f7b974dfb026 Mon Sep 17 00:00:00 2001
From: Dylan Camus <camusd@os-class.engr.oregonstate.edu>
Date: Thu, 19 May 2016 11:29:24 -0700
Subject: [PATCH 05/10] not sure why but I have changes that need commiting

---
 drivers/block/rdcrypto.c | 15 ++++++++++-----
 1 file changed, 10 insertions(+), 5 deletions(-)

diff --git a/drivers/block/rdcrypto.c b/drivers/block/rdcrypto.c
index 6b3a46d..dbe350b 100644
--- a/drivers/block/rdcrypto.c
+++ b/drivers/block/rdcrypto.c
@@ -42,7 +42,7 @@ static struct rdcrypto_dev {
         struct gendisk *gd;             /* The gendisk structure */
 } Device;
 
-static void hexdump(unsigned char *buf, unsigned int len)
+static void printbuf(unsigned char *buf, unsigned int len)
 {
 	while(len--)
 		printk("%02x", *buf++);
@@ -50,6 +50,11 @@ static void hexdump(unsigned char *buf, unsigned int len)
 	printk("\n");
 }
 
+static void printtest(unsigned char *buf)
+{
+   	printk("%s\n", buf);
+}
+
 /*
  * Handle an I/O request.
  */
@@ -75,7 +80,7 @@ rdcrypto_transfer(struct rdcrypto_dev *dev, unsigned long sector,
 	{
 		printk("RAM Disk is being written to\n");
 		printk("Data before encryption: ");
-		hexdump(buffer, nbytes);
+		printbuf(buffer, nbytes);
 		for(i = 0; i < nbytes; i += 
 		      crypto_cipher_blocksize(my_cipher))
 		{
@@ -85,13 +90,13 @@ rdcrypto_transfer(struct rdcrypto_dev *dev, unsigned long sector,
 			      dev->data + offset + i, buffer + i);
 		}
 		printk("Data after encryption: ");
-		hexdump(dev->data + offset, nbytes);
+		printbuf(dev->data + offset, nbytes);
 	}
 	else
 	{
 		printk("RAM Disk is being read\n");
 		printk("Data before decryption: ");
-		hexdump(dev->data + offset, nbytes);
+		printbuf(dev->data + offset, nbytes);
 		for(i = 0; i < nbytes; i +=
 		      crypto_cipher_blocksize(my_cipher))
 		{
@@ -99,7 +104,7 @@ rdcrypto_transfer(struct rdcrypto_dev *dev, unsigned long sector,
 			      buffer + i, dev->data + offset + i);
 		}
 		printk("Data after decryption: ");
-		hexdump(buffer, nbytes);
+		printfbuf(buffer, nbytes);
 	}
 }
 
-- 
1.7.12.4


From 6ec9ac04e73a9f54b780188a0c8df5ba21b8edc5 Mon Sep 17 00:00:00 2001
From: Dylan Camus <camusd@os-class.engr.oregonstate.edu>
Date: Fri, 3 Jun 2016 20:31:32 -0700
Subject: [PATCH 06/10] finished slob

---
 arch/x86/syscalls/syscall_32.tbl |  2 ++
 include/linux/syscalls.h         |  2 ++
 mm/slob.c                        | 51 ++++++++++++++++++++++++++++++----------
 3 files changed, 43 insertions(+), 12 deletions(-)

diff --git a/arch/x86/syscalls/syscall_32.tbl b/arch/x86/syscalls/syscall_32.tbl
index 96bc506..05cff3d 100644
--- a/arch/x86/syscalls/syscall_32.tbl
+++ b/arch/x86/syscalls/syscall_32.tbl
@@ -359,3 +359,5 @@
 350	i386	finit_module		sys_finit_module
 351	i386	sched_setattr		sys_sched_setattr
 352	i386	sched_getattr		sys_sched_getattr
+353	i386	slob_free		sys_slob_free
+354	i386	slob_used		sys_slob_used
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a747a77..807aa90 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -855,4 +855,6 @@ asmlinkage long sys_process_vm_writev(pid_t pid,
 asmlinkage long sys_kcmp(pid_t pid1, pid_t pid2, int type,
 			 unsigned long idx1, unsigned long idx2);
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
+asmlinkage long sys_slob_free(void);
+asmlinkage long sys_slob_used(void);
 #endif
diff --git a/mm/slob.c b/mm/slob.c
index 4bf8809..94c847d 100644
--- a/mm/slob.c
+++ b/mm/slob.c
@@ -87,6 +87,9 @@ typedef s16 slobidx_t;
 typedef s32 slobidx_t;
 #endif
 
+unsigned long page_count_slob = 0;
+unsigned long free_units = 0;
+
 struct slob_block {
 	slobidx_t units;
 };
@@ -268,10 +271,13 @@ static void *slob_page_alloc(struct page *sp, size_t size, int align)
 static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 {
 	struct page *sp;
+	struct page *sp_other = NULL;
+	struct list_head *slob_list;
 	struct list_head *prev;
 	struct list_head *slob_list;
 	slob_t *b = NULL;
 	unsigned long flags;
+	free_units = 0;
 
 	if (size < SLOB_BREAK1)
 		slob_list = &free_slob_small;
@@ -295,20 +301,30 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 		if (sp->units < SLOB_UNITS(size))
 			continue;
 
-		/* Attempt to alloc */
-		prev = sp->list.prev;
-		b = slob_page_alloc(sp, size, align);
-		if (!b)
-			continue;
+		if(sp_other == NULL)
+		   	sp_other = sp;
+
+		if(sp->units < sp_other->units)
+		   	sp_other = sp;
+	}
 
-		/* Improve fragment distribution and reduce our average
-		 * search time by starting our next search here. (see
-		 * Knuth vol 1, sec 2.5, pg 449) */
-		if (prev != slob_list->prev &&
-				slob_list->next != prev->next)
-			list_move_tail(slob_list, prev->next);
-		break;
+	/* Attempt to alloc */
+	if(sp_other != NULL)
+	   	b = slob_page_alloc(sp_other, size, align);
+
+	temp = &free_slob_small;
+	list_for_each_entry(sp, temp, list) {
+	   	free_units += sp->units;
+	}
+	temp = &free_slob_medium;
+	list_for_each_entry(sp, temp, list) {
+	   	free_units += sp->units;
 	}
+	temp = &free_slob_large;
+	list_for_each_entry(sp, temp, list) {
+	   	free_units += sp->units;
+	}
+	
 	spin_unlock_irqrestore(&slob_lock, flags);
 
 	/* Not enough space: must allocate a new page */
@@ -328,6 +344,7 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 		b = slob_page_alloc(sp, size, align);
 		BUG_ON(!b);
 		spin_unlock_irqrestore(&slob_lock, flags);
+		page_count_slob++;
 	}
 	if (unlikely((gfp & __GFP_ZERO) && b))
 		memset(b, 0, size);
@@ -362,6 +379,7 @@ static void slob_free(void *block, int size)
 		__ClearPageSlab(sp);
 		page_mapcount_reset(sp);
 		slob_free_pages(b, 0);
+		page_count_slob--;
 		return;
 	}
 
@@ -633,6 +651,15 @@ struct kmem_cache kmem_cache_boot = {
 	.align = ARCH_KMALLOC_MINALIGN,
 };
 
+asmlinkage long sys_slob_used(void) {
+   	long slob_total_used = SLOB_UNITS(PAGE_SIZE) * page_count_slob;
+	return slob_total_used;
+}
+
+asmlinkage long sys_slob_free(void) {
+      	return free_units;
+}
+
 void __init kmem_cache_init(void)
 {
 	kmem_cache = &kmem_cache_boot;
-- 
1.7.12.4


From 5775dbe8b87d3df22b18dcdb9adb215170622fb4 Mon Sep 17 00:00:00 2001
From: Dylan Camus <camusd@os-class.engr.oregonstate.edu>
Date: Wed, 8 Jun 2016 01:24:07 -0700
Subject: [PATCH 07/10] added txt file that was made from testing best fit vs
 first fit

---
 drivers/block/Makefile | 2 --
 mm/slob.c              | 8 ++------
 2 files changed, 2 insertions(+), 8 deletions(-)

diff --git a/drivers/block/Makefile b/drivers/block/Makefile
index 2ebc0e3..02b688d 100644
--- a/drivers/block/Makefile
+++ b/drivers/block/Makefile
@@ -5,8 +5,6 @@
 # Rewritten to use lists instead of if-statements.
 # 
 
-obj-$(CONFIG_RDCRYPTO)		+= rdcrypto.o
-
 obj-$(CONFIG_MAC_FLOPPY)	+= swim3.o
 obj-$(CONFIG_BLK_DEV_SWIM)	+= swim_mod.o
 obj-$(CONFIG_BLK_DEV_FD)	+= floppy.o
diff --git a/mm/slob.c b/mm/slob.c
index 94c847d..a4bbf81 100644
--- a/mm/slob.c
+++ b/mm/slob.c
@@ -58,7 +58,6 @@
 
 #include <linux/kernel.h>
 #include <linux/slab.h>
-
 #include <linux/mm.h>
 #include <linux/swap.h> /* struct reclaim_state */
 #include <linux/cache.h>
@@ -67,11 +66,9 @@
 #include <linux/rcupdate.h>
 #include <linux/list.h>
 #include <linux/kmemleak.h>
-
+#include <linux/syscalls.h>
 #include <trace/events/kmem.h>
-
 #include <linux/atomic.h>
-
 #include "slab.h"
 /*
  * slob_block has a field 'units', which indicates size of block if +ve,
@@ -273,8 +270,7 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 	struct page *sp;
 	struct page *sp_other = NULL;
 	struct list_head *slob_list;
-	struct list_head *prev;
-	struct list_head *slob_list;
+	struct list_head *temp;
 	slob_t *b = NULL;
 	unsigned long flags;
 	free_units = 0;
-- 
1.7.12.4


From 8d19b1cf8e1b37c941ee651e00b64afce00f2ba0 Mon Sep 17 00:00:00 2001
From: Dylan Camus <camusd@os-class.engr.oregonstate.edu>
Date: Wed, 8 Jun 2016 11:51:09 -0700
Subject: [PATCH 08/10] made a change to slob.c to improve fragmentation

---
 mm/slob.c | 50 ++++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 42 insertions(+), 8 deletions(-)

diff --git a/mm/slob.c b/mm/slob.c
index a4bbf81..df4ad55 100644
--- a/mm/slob.c
+++ b/mm/slob.c
@@ -85,7 +85,7 @@ typedef s32 slobidx_t;
 #endif
 
 unsigned long page_count_slob = 0;
-unsigned long free_units = 0;
+//unsigned long free_units = 0;
 
 struct slob_block {
 	slobidx_t units;
@@ -271,9 +271,10 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 	struct page *sp_other = NULL;
 	struct list_head *slob_list;
 	struct list_head *temp;
+	struct list_head *prev;
 	slob_t *b = NULL;
 	unsigned long flags;
-	free_units = 0;
+	//free_units = 0;
 
 	if (size < SLOB_BREAK1)
 		slob_list = &free_slob_small;
@@ -302,13 +303,14 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 
 		if(sp->units < sp_other->units)
 		   	sp_other = sp;
-	}
 
-	/* Attempt to alloc */
-	if(sp_other != NULL)
-	   	b = slob_page_alloc(sp_other, size, align);
+		/* Attempt to alloc */
+		if(sp_other != NULL) {
+		   	prev = sp_other->lru.prev;
+	   		b = slob_page_alloc(sp_other, size, align);
+		}
 
-	temp = &free_slob_small;
+	/*temp = &free_slob_small;
 	list_for_each_entry(sp, temp, list) {
 	   	free_units += sp->units;
 	}
@@ -319,6 +321,18 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 	temp = &free_slob_large;
 	list_for_each_entry(sp, temp, list) {
 	   	free_units += sp->units;
+	}*/
+
+		if (!b)
+			continue;
+	
+	/* Improve fragment distribution and reduce our average
+	 * search time by starting our next search here. (see
+	 * Knuth vol 1, sec 2.5, pg 449) */
+		if (prev != slob_list->prev &&
+			slob_list->next != prev->next)
+			list_move_tail(slob_list, prev->next);
+		break;
 	}
 	
 	spin_unlock_irqrestore(&slob_lock, flags);
@@ -331,6 +345,8 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 		sp = virt_to_page(b);
 		__SetPageSlab(sp);
 
+		page_count_slob++;
+
 		spin_lock_irqsave(&slob_lock, flags);
 		sp->units = SLOB_UNITS(PAGE_SIZE);
 		sp->freelist = b;
@@ -340,7 +356,6 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 		b = slob_page_alloc(sp, size, align);
 		BUG_ON(!b);
 		spin_unlock_irqrestore(&slob_lock, flags);
-		page_count_slob++;
 	}
 	if (unlikely((gfp & __GFP_ZERO) && b))
 		memset(b, 0, size);
@@ -653,6 +668,25 @@ asmlinkage long sys_slob_used(void) {
 }
 
 asmlinkage long sys_slob_free(void) {
+   	long free_units = 0;
+	struct page *sp;
+	struct list_head *slob_list;
+
+	slob_list = &free_slob_small;
+	list_for_each_entry(sp, slob_list, list) {
+	   	free_units += sp->units;
+	}
+
+	slob_list = &free_slob_medium;
+	list_for_each_entry(sp, slob_list, list) {
+	   	free_units += sp->units;
+	}
+
+	slob_list = &free_slob_large;
+	list_for_each_entry(sp, slob_list, list) {
+	   	free_units += sp->units;
+	}
+
       	return free_units;
 }
 
-- 
1.7.12.4


From b5ce926897c83dc70cad976f7ca4898603a28fe7 Mon Sep 17 00:00:00 2001
From: Dylan Camus <camusd@os-class.engr.oregonstate.edu>
Date: Wed, 8 Jun 2016 13:19:17 -0700
Subject: [PATCH 09/10] made some good changes to my slob algorithm

---
 mm/slob.c | 204 ++++++++++++++++++++++++++++++++++++--------------------------
 1 file changed, 118 insertions(+), 86 deletions(-)

diff --git a/mm/slob.c b/mm/slob.c
index df4ad55..9ef8c1e 100644
--- a/mm/slob.c
+++ b/mm/slob.c
@@ -101,6 +101,10 @@ static LIST_HEAD(free_slob_small);
 static LIST_HEAD(free_slob_medium);
 static LIST_HEAD(free_slob_large);
 
+long claimed[100];
+long freed[100];
+int counter = 0;
+
 /*
  * slob_page_free: true for pages on free_slob_pages list.
  */
@@ -218,6 +222,11 @@ static void *slob_page_alloc(struct page *sp, size_t size, int align)
 {
 	slob_t *prev, *cur, *aligned = NULL;
 	int delta = 0, units = SLOB_UNITS(size);
+	slob_t *best_prev = NULL;
+	slob_t *best_cur = NULL;
+	slob_t *best_aligned = NULL;
+	int best_delta = 0;
+	slobidx_t best_fit = 0;
 
 	for (prev = NULL, cur = sp->freelist; ; prev = cur, cur = slob_next(cur)) {
 		slobidx_t avail = slob_units(cur);
@@ -226,39 +235,82 @@ static void *slob_page_alloc(struct page *sp, size_t size, int align)
 			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
 			delta = aligned - cur;
 		}
-		if (avail >= units + delta) { /* room enough? */
-			slob_t *next;
-
-			if (delta) { /* need to fragment head to align? */
-				next = slob_next(cur);
-				set_slob(aligned, avail - delta, next);
-				set_slob(cur, delta, aligned);
-				prev = cur;
-				cur = aligned;
-				avail = slob_units(cur);
-			}
+		if (avail >= units + delta && (best_cur == NULL || avail - (units + delta) < best_fit)) { /* room enough? */
+			best_prev = prev;
+			best_cur = cur;
+			best_aligned = aligned;
+			best_delta = delta;
+			best_fit = avail - (units + delta);
+		}
 
-			next = slob_next(cur);
-			if (avail == units) { /* exact fit? unlink. */
-				if (prev)
-					set_slob(prev, slob_units(prev), next);
-				else
-					sp->freelist = next;
-			} else { /* fragment */
-				if (prev)
-					set_slob(prev, slob_units(prev), cur + units);
-				else
-					sp->freelist = cur + units;
-				set_slob(cur + units, avail - units, next);
+		if(slob_last(cur)) {
+		   	if(best_cur != NULL) {
+			   	slob_t *best_next = NULL;
+				slobidx_t best_avail = slob_units(best_cur);
+
+				if (best_delta) { /* need to fragment head to align? */
+					best_next = slob_next(best_cur);
+					set_slob(best_aligned, best_avail - best_delta, best_next);
+					set_slob(best_cur, best_delta, best_aligned);
+					best_prev = best_cur;
+					best_cur = best_aligned;
+					best_avail = slob_units(best_cur);
+				}
+
+				best_next = slob_next(best_cur);
+				if (best_avail == units) { /* exact fit? unlink. */
+					if (best_prev)
+						set_slob(best_prev, slob_units(best_prev), best_next);
+					else
+						sp->freelist = best_next;
+				} else { /* fragment */
+					if (best_prev)
+						set_slob(best_prev, slob_units(best_prev), best_cur + units);
+					else
+						sp->freelist = best_cur + units;
+						set_slob(best_cur + units, best_avail - units, best_next);
+				}
+
+				sp->units -= units;
+				if (!sp->units)
+					clear_slob_page_free(sp);
+				return best_cur;
 			}
+		
+			return NULL;
+		}
+	}
+}
 
-			sp->units -= units;
-			if (!sp->units)
-				clear_slob_page_free(sp);
-			return cur;
+static int slob_best_fit_check(struct page *sp, size_t size, int align)
+{
+	slob_t *prev = NULL;
+     	slob_t *cur = NULL;
+	slob_t *aligned = NULL;	
+	int delta = 0;
+	int units = SLOB_UNITS(size);
+	slob_t *best_cur = NULL;
+	slobidx_t best_fit = 0;
+
+	for(prev = NULL, cur = sp->freelist; ; prev = cur, cur = slob_next(cur)) {
+	   	slobidx_t avail = slob_units(cur);
+
+		if(align) {
+		   	aligned = (slob_t *)ALIGN((unsigned long)cur, align);
+			delta = aligned - cur;
+		}
+		if(avail >= units + delta && (best_cur == NULL || avail - (units + delta) < best_fit)) {
+		   	best_cur = cur;
+			best_fit = avail - (units + delta);
+			if(best_fit == 0)
+			   	return 0;
+		}
+		if(slob_last(cur)) {
+		   	if(best_cur != NULL)
+			   	return best_fit;
+
+			return -1;
 		}
-		if (slob_last(cur))
-			return NULL;
 	}
 }
 
@@ -274,7 +326,9 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 	struct list_head *prev;
 	slob_t *b = NULL;
 	unsigned long flags;
-	//free_units = 0;
+	struct page *best_sp = NULL;
+	int best_fit = -1;
+	long temp_free = 0;
 
 	if (size < SLOB_BREAK1)
 		slob_list = &free_slob_small;
@@ -286,6 +340,8 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 	spin_lock_irqsave(&slob_lock, flags);
 	/* Iterate through each partially free page, try to find room */
 	list_for_each_entry(sp, slob_list, list) {
+	   	int current_fit = -1;
+		temp_free = tem_free + sp->units;
 #ifdef CONFIG_NUMA
 		/*
 		 * If there's a node specification, search for a partial
@@ -298,43 +354,22 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 		if (sp->units < SLOB_UNITS(size))
 			continue;
 
-		if(sp_other == NULL)
-		   	sp_other = sp;
-
-		if(sp->units < sp_other->units)
-		   	sp_other = sp;
-
-		/* Attempt to alloc */
-		if(sp_other != NULL) {
-		   	prev = sp_other->lru.prev;
-	   		b = slob_page_alloc(sp_other, size, align);
+		current_fit = slob_best_fit_check(sp, size, align);
+		if(current_fit == 0) {
+		   	best_sp = sp;
+			best_fit = current_fit;
+			break;
 		}
-
-	/*temp = &free_slob_small;
-	list_for_each_entry(sp, temp, list) {
-	   	free_units += sp->units;
-	}
-	temp = &free_slob_medium;
-	list_for_each_entry(sp, temp, list) {
-	   	free_units += sp->units;
+		else if(current_fit > 0 && (best_fit == -1 || current_fit < best_fit)) {
+		   	best_sp = sp;
+			best_fit = current_fit;
+		}
+		continue;
 	}
-	temp = &free_slob_large;
-	list_for_each_entry(sp, temp, list) {
-	   	free_units += sp->units;
-	}*/
 
-		if (!b)
-			continue;
-	
-	/* Improve fragment distribution and reduce our average
-	 * search time by starting our next search here. (see
-	 * Knuth vol 1, sec 2.5, pg 449) */
-		if (prev != slob_list->prev &&
-			slob_list->next != prev->next)
-			list_move_tail(slob_list, prev->next);
-		break;
-	}
-	
+	if(best_fit >= 0)
+	   	b = slob_page_alloc(best_sp, size, align);
+
 	spin_unlock_irqrestore(&slob_lock, flags);
 
 	/* Not enough space: must allocate a new page */
@@ -345,9 +380,12 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 		sp = virt_to_page(b);
 		__SetPageSlab(sp);
 
-		page_count_slob++;
-
 		spin_lock_irqsave(&slob_lock, flags);
+
+		claimed[counter] = size;
+		freed[counter] = (temp_free * SLOB_UNIT) - SLOB_UNIT + 1;
+		counter = (counter + 1) % 100;
+
 		sp->units = SLOB_UNITS(PAGE_SIZE);
 		sp->freelist = b;
 		INIT_LIST_HEAD(&sp->list);
@@ -663,31 +701,25 @@ struct kmem_cache kmem_cache_boot = {
 };
 
 asmlinkage long sys_slob_used(void) {
-   	long slob_total_used = SLOB_UNITS(PAGE_SIZE) * page_count_slob;
-	return slob_total_used;
-}
+   	long total = 0;
+	int i = 0;
 
-asmlinkage long sys_slob_free(void) {
-   	long free_units = 0;
-	struct page *sp;
-	struct list_head *slob_list;
-
-	slob_list = &free_slob_small;
-	list_for_each_entry(sp, slob_list, list) {
-	   	free_units += sp->units;
+	for(i = 0; i < 100; i++) {
+	   	total = total + claimed[i];
 	}
 
-	slob_list = &free_slob_medium;
-	list_for_each_entry(sp, slob_list, list) {
-	   	free_units += sp->units;
-	}
+	return total/100;
+}
 
-	slob_list = &free_slob_large;
-	list_for_each_entry(sp, slob_list, list) {
-	   	free_units += sp->units;
-	}
+asmlinkage long sys_slob_free(void) {
+   long total = 0;
+   int i = 0;
+
+   for(i = 0; i < 100; i++) {
+      	total = total + freed[i];
+   }
 
-      	return free_units;
+   return total/100;
 }
 
 void __init kmem_cache_init(void)
-- 
1.7.12.4


From f85c3d4a1d8e0ee914ce62534942027e7c1e0ab0 Mon Sep 17 00:00:00 2001
From: Dylan Camus <camusd@os-class.engr.oregonstate.edu>
Date: Wed, 8 Jun 2016 13:47:52 -0700
Subject: [PATCH 10/10] fixed a small bug in slob

---
 mm/slob.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/mm/slob.c b/mm/slob.c
index 9ef8c1e..2fa273b 100644
--- a/mm/slob.c
+++ b/mm/slob.c
@@ -341,7 +341,7 @@ static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
 	/* Iterate through each partially free page, try to find room */
 	list_for_each_entry(sp, slob_list, list) {
 	   	int current_fit = -1;
-		temp_free = tem_free + sp->units;
+		temp_free = temp_free + sp->units;
 #ifdef CONFIG_NUMA
 		/*
 		 * If there's a node specification, search for a partial
-- 
1.7.12.4

