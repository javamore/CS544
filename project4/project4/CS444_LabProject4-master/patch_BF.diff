diff -rcNP pristine-linux/arch/x86/syscalls/syscall_32.tbl linux-yocto-3.14/arch/x86/syscalls/syscall_32.tbl
*** pristine-linux/arch/x86/syscalls/syscall_32.tbl	2017-06-04 17:15:25.516786414 -0700
--- linux-yocto-3.14/arch/x86/syscalls/syscall_32.tbl	2017-06-04 16:29:35.489288896 -0700
***************
*** 359,361 ****
--- 359,362 ----
  350	i386	finit_module		sys_finit_module
  351	i386	sched_setattr		sys_sched_setattr
  352	i386	sched_getattr		sys_sched_getattr
+ 353	i386	slob_memory_free	sys_slob_memory_free
Binary files pristine-linux/.git/index and linux-yocto-3.14/.git/index differ
diff -rcNP pristine-linux/.git/logs/HEAD linux-yocto-3.14/.git/logs/HEAD
*** pristine-linux/.git/logs/HEAD	2017-06-04 17:15:58.527357625 -0700
--- linux-yocto-3.14/.git/logs/HEAD	2017-06-04 11:23:44.447284256 -0700
***************
*** 1,2 ****
! 0000000000000000000000000000000000000000 3965864f2fe64e424849652de5dca603ffaf63f1 Andrew Peterkort <peterkoa@os-class.engr.oregonstate.edu> 1496621723 -0700	clone: from https://git.yoctoproject.org/git/linux-yocto-3.14
! 3965864f2fe64e424849652de5dca603ffaf63f1 356a3e1fde11190febb8ace3cdab8694848ed220 Andrew Peterkort <peterkoa@os-class.engr.oregonstate.edu> 1496621758 -0700	checkout: moving from master to v3.14.26
--- 1,2 ----
! 0000000000000000000000000000000000000000 3965864f2fe64e424849652de5dca603ffaf63f1 Andrew Peterkort <peterkoa@os-class.engr.oregonstate.edu> 1496600596 -0700	clone: from https://git.yoctoproject.org/git/linux-yocto-3.14
! 3965864f2fe64e424849652de5dca603ffaf63f1 356a3e1fde11190febb8ace3cdab8694848ed220 Andrew Peterkort <peterkoa@os-class.engr.oregonstate.edu> 1496600624 -0700	checkout: moving from master to v3.14.26
diff -rcNP pristine-linux/.git/logs/refs/heads/master linux-yocto-3.14/.git/logs/refs/heads/master
*** pristine-linux/.git/logs/refs/heads/master	2017-06-04 17:15:23.051743758 -0700
--- linux-yocto-3.14/.git/logs/refs/heads/master	2017-06-04 11:23:16.740812897 -0700
***************
*** 1 ****
! 0000000000000000000000000000000000000000 3965864f2fe64e424849652de5dca603ffaf63f1 Andrew Peterkort <peterkoa@os-class.engr.oregonstate.edu> 1496621723 -0700	clone: from https://git.yoctoproject.org/git/linux-yocto-3.14
--- 1 ----
! 0000000000000000000000000000000000000000 3965864f2fe64e424849652de5dca603ffaf63f1 Andrew Peterkort <peterkoa@os-class.engr.oregonstate.edu> 1496600596 -0700	clone: from https://git.yoctoproject.org/git/linux-yocto-3.14
diff -rcNP pristine-linux/.git/logs/refs/remotes/origin/HEAD linux-yocto-3.14/.git/logs/refs/remotes/origin/HEAD
*** pristine-linux/.git/logs/refs/remotes/origin/HEAD	2017-06-04 17:15:23.051743758 -0700
--- linux-yocto-3.14/.git/logs/refs/remotes/origin/HEAD	2017-06-04 11:23:16.739812880 -0700
***************
*** 1 ****
! 0000000000000000000000000000000000000000 3965864f2fe64e424849652de5dca603ffaf63f1 Andrew Peterkort <peterkoa@os-class.engr.oregonstate.edu> 1496621723 -0700	clone: from https://git.yoctoproject.org/git/linux-yocto-3.14
--- 1 ----
! 0000000000000000000000000000000000000000 3965864f2fe64e424849652de5dca603ffaf63f1 Andrew Peterkort <peterkoa@os-class.engr.oregonstate.edu> 1496600596 -0700	clone: from https://git.yoctoproject.org/git/linux-yocto-3.14
Binary files pristine-linux/.git/objects/pack/pack-0edba1a9849b741e008925a7e49e2954269a613b.idx and linux-yocto-3.14/.git/objects/pack/pack-0edba1a9849b741e008925a7e49e2954269a613b.idx differ
Binary files pristine-linux/.git/objects/pack/pack-0edba1a9849b741e008925a7e49e2954269a613b.pack and linux-yocto-3.14/.git/objects/pack/pack-0edba1a9849b741e008925a7e49e2954269a613b.pack differ
diff -rcNP pristine-linux/include/linux/syscalls.h linux-yocto-3.14/include/linux/syscalls.h
*** pristine-linux/include/linux/syscalls.h	2017-06-04 17:15:29.350852759 -0700
--- linux-yocto-3.14/include/linux/syscalls.h	2017-06-04 16:30:29.128206406 -0700
***************
*** 855,858 ****
--- 855,859 ----
  asmlinkage long sys_kcmp(pid_t pid1, pid_t pid2, int type,
  			 unsigned long idx1, unsigned long idx2);
  asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
+ asmlinkage long sys_slob_memory_free(void);
  #endif
diff -rcNP pristine-linux/mm/slob.c linux-yocto-3.14/mm/slob.c
*** pristine-linux/mm/slob.c	2017-06-04 17:15:29.628857571 -0700
--- linux-yocto-3.14/mm/slob.c	2017-06-09 20:02:30.993164698 -0700
***************
*** 57,64 ****
--- 57,67 ----
   */
  
  #include <linux/kernel.h>
+ #include <linux/syscalls.h>
  #include <linux/slab.h>
  
+ #include <linux/linkage.h>
+ 
  #include <linux/mm.h>
  #include <linux/swap.h> /* struct reclaim_state */
  #include <linux/cache.h>
***************
*** 211,233 ****
  	free_pages((unsigned long)b, order);
  }
  
  /*
   * Allocate a slob block within a given slob_page sp.
   */
  static void *slob_page_alloc(struct page *sp, size_t size, int align)
  {
  	slob_t *prev, *cur, *aligned = NULL;
  	int delta = 0, units = SLOB_UNITS(size);
  
! 	for (prev = NULL, cur = sp->freelist; ; prev = cur, cur = slob_next(cur)) {
! 		slobidx_t avail = slob_units(cur);
  
  		if (align) {
  			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
  			delta = aligned - cur;
  		}
! 		if (avail >= units + delta) { /* room enough? */
! 			slob_t *next;
  
  			if (delta) { /* need to fragment head to align? */
  				next = slob_next(cur);
--- 214,336 ----
  	free_pages((unsigned long)b, order);
  }
  
+ long slob_check_page( struct page *sp, size_t size, int align )
+ {
+ 	slob_t *cur, *prev, *aligned = NULL;
+ 	int units = SLOB_UNITS( size );
+ 	int delta = 0;
+ 	long tempDifference;
+ 	long difference = -1;
+ 
+ 	slob_t* assigned_yet = NULL;
+ 
+ 	for (prev = NULL, cur = sp->freelist; ; prev = cur, cur = slob_next(cur))
+ 	{
+ 
+ 		slobidx_t avail = slob_units( cur );
+ 
+ 		if( align ){
+ 			aligned = (slob_t*)ALIGN( (unsigned long)cur, align);
+ 			delta = aligned - cur;
+ 		}
+ 
+ 
+ 		tempDifference = avail - ( units + delta );
+ 
+ 		if( ( ( tempDifference < difference ) && tempDifference >= 0 ) || ( assigned_yet == NULL && tempDifference >= 0 ) ){
+ 
+ 			difference = tempDifference;
+ 			assigned_yet = cur;
+ 			
+ 		}
+ 
+ 		
+ 		if( slob_last( cur ) && assigned_yet == NULL ){
+ 			
+ 	   		return -1;
+ 		
+ 		}else if( slob_last( cur ) ){
+ 			
+ 			//printk( "\nTHE BEST DIFFERENCE IS: %ld\n", difference );
+ 	   		return difference;
+ 		
+ 		}
+ 		
+ 	}
+ 
+ }
+ 
  /*
   * Allocate a slob block within a given slob_page sp.
   */
  static void *slob_page_alloc(struct page *sp, size_t size, int align)
  {
  	slob_t *prev, *cur, *aligned = NULL;
+ 	slob_t *best_prev = NULL;
  	int delta = 0, units = SLOB_UNITS(size);
+ 	slobidx_t avail;
+ 	slob_t *next;
+ 
+ 	long tempDifference;
+ 	long difference = -1;
  
! 	slob_t* best_slob = NULL;
! 
! 	if( sp == NULL ){
! 
!    		return NULL;	   
! 	
! 	}
! 
! 	for (prev = NULL, cur = sp->freelist; ; prev = cur, cur = slob_next(cur))
! 	{
! 
! 		avail = slob_units( cur );
! 
! 		if( align ){
! 			aligned = (slob_t*)ALIGN( (unsigned long)cur, align);
! 			delta = aligned - cur;
! 		}
! 
! 		tempDifference = avail - ( units + delta );
! 
! 		if (avail >= units + delta && (best_slob == NULL || avail - (units + delta) < difference ) ){
! 		//if( ( ( tempDifference < difference ) && tempDifference >= 0 ) || ( best_slob == NULL && tempDifference >= 0 ) ){
! 
! 			difference = tempDifference;
! 			best_slob = cur;
! 			best_prev = prev;
! 
! 		}
! 
! 		if( slob_last( cur ) ){
! 
! 		       if( best_slob == NULL ){
! 		      
! 				return NULL;
! 
! 		       }else{
! 		       
! 				break; 
! 		       
! 		       }
! 		
! 		}
! 	
! 	}
! 
! 	cur = best_slob;
! 	prev = best_prev;
! 	avail = slob_units( cur );
! 
! 	//for (prev = NULL, cur = sp->freelist; ; prev = cur, cur = slob_next(cur)) {
! 	//	slobidx_t avail = slob_units(cur);
  
  		if (align) {
  			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
  			delta = aligned - cur;
  		}
! 		//if (avail >= units + delta) { /* room enough? */
  
  			if (delta) { /* need to fragment head to align? */
  				next = slob_next(cur);
***************
*** 256,265 ****
  			if (!sp->units)
  				clear_slob_page_free(sp);
  			return cur;
! 		}
! 		if (slob_last(cur))
! 			return NULL;
! 	}
  }
  
  /*
--- 359,369 ----
  			if (!sp->units)
  				clear_slob_page_free(sp);
  			return cur;
! 		//}
! 		//if (slob_last(cur))
! 		//	return NULL;
! 	//}
! 
  }
  
  /*
***************
*** 268,277 ****
--- 372,383 ----
  static void *slob_alloc(size_t size, gfp_t gfp, int align, int node)
  {
  	struct page *sp;
+ 	struct page *best_page = NULL;
  	struct list_head *prev;
  	struct list_head *slob_list;
  	slob_t *b = NULL;
  	unsigned long flags;
+ 	long temp_size, current_size = -1;
  
  	if (size < SLOB_BREAK1)
  		slob_list = &free_slob_small;
***************
*** 291,314 ****
  		if (node != NUMA_NO_NODE && page_to_nid(sp) != node)
  			continue;
  #endif
- 		/* Enough room on this page? */
  		if (sp->units < SLOB_UNITS(size))
! 			continue;
  
  		/* Attempt to alloc */
  		prev = sp->list.prev;
! 		b = slob_page_alloc(sp, size, align);
! 		if (!b)
! 			continue;
  
  		/* Improve fragment distribution and reduce our average
  		 * search time by starting our next search here. (see
  		 * Knuth vol 1, sec 2.5, pg 449) */
! 		if (prev != slob_list->prev &&
! 				slob_list->next != prev->next)
! 			list_move_tail(slob_list, prev->next);
! 		break;
! 	}
  	spin_unlock_irqrestore(&slob_lock, flags);
  
  	/* Not enough space: must allocate a new page */
--- 397,444 ----
  		if (node != NUMA_NO_NODE && page_to_nid(sp) != node)
  			continue;
  #endif
  		if (sp->units < SLOB_UNITS(size))
!    			continue;
! 
! 	   	temp_size = slob_check_page( sp, size, align );	   
! 		if( temp_size >= 0 ){
! 			if( temp_size < current_size || current_size == -1 ){
! 		/* Enough room on this page? */
! 		//if (sp->units < SLOB_UNITS(size))
! 		
! 	   			current_size = temp_size;	   
! 				best_page = sp;
! 	
! 		
! 			}else{
! 
! 				continue;
! 		
! 			}
! 
! 		}else{
! 	
! 	   		continue; 
! 		
! 		}
! 
! 	}
  
+ 	
  		/* Attempt to alloc */
  		prev = sp->list.prev;
! 		b = slob_page_alloc(best_page, size, align);
! 		//if (!b)
! 		//	continue;
  
  		/* Improve fragment distribution and reduce our average
  		 * search time by starting our next search here. (see
  		 * Knuth vol 1, sec 2.5, pg 449) */
! 		//if (prev != slob_list->prev &&
! 		//		slob_list->next != prev->next)
! 		//	list_move_tail(slob_list, prev->next);
! 		//break;
! 	
  	spin_unlock_irqrestore(&slob_lock, flags);
  
  	/* Not enough space: must allocate a new page */
***************
*** 643,645 ****
--- 773,816 ----
  {
  	slab_state = FULL;
  }
+ 
+ long add_free_memory(void){
+ 
+ 	struct page *sp;
+ 	struct list_head *slob_list = &free_slob_small;
+ 	long free_mem = 0;
+ 	unsigned long flags;
+ 	spin_lock_irqsave(&slob_lock, flags);
+ 
+ 	list_for_each_entry(sp, slob_list, list){
+ 
+ 		free_mem = free_mem + sp->units;	
+ 	
+ 	}
+ 
+ 	slob_list = &free_slob_medium;
+ 
+ 	list_for_each_entry(sp, slob_list, list){
+ 
+ 		free_mem = free_mem + sp->units;	
+ 	
+ 	}
+ 
+ 	slob_list = &free_slob_large;
+ 
+ 	list_for_each_entry(sp, slob_list, list){
+ 
+ 		free_mem = free_mem + sp->units;	
+ 	
+ 	}
+ 
+ 	spin_unlock_irqrestore(&slob_lock, flags);
+ 
+ 	return free_mem;
+ }
+ 
+ asmlinkage long sys_slob_memory_free(void)
+ {
+ 	long free_mem = add_free_memory();
+ 	return free_mem;
+ }
